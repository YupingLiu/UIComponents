//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;


public class CopyFBXEvents : EditorWindow
{
    [MenuItem("Killer/CopyFBXEvents")]
    public static void Init()
    {
        CopyFBXEvents window = (CopyFBXEvents)EditorWindow.GetWindow (typeof (CopyFBXEvents));
    }

    private SerializedObject m_SourceObject;
    private SerializedObject m_TargetObject;
    private SerializedProperty m_source;
    private SerializedProperty m_target;
	public CopyFBXEvents ()
	{
	}

    void OnGUI ()
    {
        Object obj = EditorGUILayout.ObjectField(null != m_SourceObject ? m_SourceObject.targetObject : null, typeof(Object), true);
        if (null != obj)
        {
            m_SourceObject = new SerializedObject(obj);
        }

        obj = EditorGUILayout.ObjectField(null != m_TargetObject ? m_TargetObject.targetObject : null, typeof(Object), true);
        if (null != obj)
        {
            m_TargetObject = new SerializedObject(obj);
        }

        if (null != m_SourceObject && null != m_TargetObject)
        {
            if(GUILayout.Button("Copy"))
            {
                DoCopyFBXEvents(m_SourceObject, m_TargetObject);
            }
        }
    }

    private void DoCopyFBXEventsByFile( SerializedObject source, SerializedObject target )
    {
        SerializedProperty ppt = source.GetIterator();
        ppt.Next(true);
        while (ppt.Next(true))
        {
#if DEV_BUILD
            Debug.Log(ppt.name);
#endif
        }
    }

    private void DoCopyFBXEvents( SerializedObject source, SerializedObject target )
    {
        ModelImporter simp = ModelImporter.GetAtPath(AssetDatabase.GetAssetPath(source.targetObject)) as ModelImporter;
        ModelImporter timp = ModelImporter.GetAtPath(AssetDatabase.GetAssetPath(target.targetObject)) as ModelImporter;

        ModelImporterClipAnimation[] sanis = simp.clipAnimations;
        ModelImporterClipAnimation[] tanis = timp.clipAnimations;

        for (int i = 0; i < sanis.Length; i++)
        {
            SerializedObject cobj = new SerializedObject(simp);
            SerializedProperty cclipSPT = cobj.FindProperty("m_ClipAnimations");
            string sourceClipName = (cclipSPT.GetArrayElementAtIndex(i).FindPropertyRelative("name").stringValue.ToLower());
            SerializedProperty events = cclipSPT.GetArrayElementAtIndex(i).FindPropertyRelative("events");
#if DEV_BUILD
            Debug.Log("clipName : " + sourceClipName + " eventSize : " + events.arraySize);
#endif
            if(events.arraySize > 0)
            {
                SerializedObject tcobj = new SerializedObject(timp);
                SerializedProperty tclipSPT = tcobj.FindProperty("m_ClipAnimations");
                for(int j = 0; j < tclipSPT.arraySize; j++)
                {
                    SerializedProperty clipJ = tclipSPT.GetArrayElementAtIndex(j);
                    string targetClipName = clipJ.FindPropertyRelative("name").stringValue.ToLower();
                    if(targetClipName == sourceClipName)
                    {
                        SerializedProperty tevents = clipJ.FindPropertyRelative("events");
#if DEV_BUILD
                        Debug.Log("target clipName : " + targetClipName + " eventSize : " + tevents.arraySize);
#endif
                        tevents.arraySize = events.arraySize;

                        for(int k = 0; k < events.arraySize; k++)
                        {
#if DEV_BUILD
                            Debug.Log("copy eventName : " + events.GetArrayElementAtIndex(k).FindPropertyRelative("functionName").stringValue);
#endif
                            tevents.GetArrayElementAtIndex(k).FindPropertyRelative("time").floatValue = events.GetArrayElementAtIndex(k).FindPropertyRelative("time").floatValue;
                            tevents.GetArrayElementAtIndex(k).FindPropertyRelative("functionName").stringValue = events.GetArrayElementAtIndex(k).FindPropertyRelative("functionName").stringValue;
                            tevents.GetArrayElementAtIndex(k).FindPropertyRelative("floatParameter").floatValue = events.GetArrayElementAtIndex(k).FindPropertyRelative("floatParameter").floatValue;
                            tevents.GetArrayElementAtIndex(k).FindPropertyRelative("intParameter").intValue = events.GetArrayElementAtIndex(k).FindPropertyRelative("intParameter").intValue;
                        }
                        break;
                    }
                }

                tcobj.ApplyModifiedProperties();
                AssetDatabase.ImportAsset(AssetDatabase.GetAssetPath(timp));
            }
        }

        AssetDatabase.SaveAssets();
    }
}


